{"version":3,"sources":["providers/CameraProvider.tsx","utils.ts","three/cameraComponent.tsx","three/cardConnectionDot.tsx","providers/ModelProvider.tsx","three/card.tsx","three/connections.tsx","store.ts","index.tsx"],"names":["initCamera","zoom","position","CameraStateContext","React","createContext","CameraSetStateContext","Error","CameraRefContext","current","useCameraRef","useContext","getPixelDensityForZoom","Math","exp","setCursor","cursor","document","documentElement","style","pToGrid","p","round","positionToGrid","pos","CameraComponent","children","transform","clientWidth","clientHeight","CardConnectionDot","isConnected","variant","props","r","stroke","fill","strokeWidth","ModelContext","cardMap","Map","connectionMap","cardFromExitMap","setCard","ModelProvider","model","onSetModel","useMemo","cards","map","c","id","connections","flatMap","exits","e","useCallback","cardId","set","m","Provider","value","useModel","CardComponent","memo","card","onChangeCard","cameraRef","setPartialCard","getPartial","bind","useGesture","onClick","event","ctrlKey","altKey","height","random","undefined","onDragStart","onDragEnd","movement","mx","my","pixelDensity","onDrag","buttons","pointerEvents","drag","threshold","width","rx","cy","exit","index","key","cx","length","Cards","Array","from","values","ConnectionComponent","connection","fromCard","toCard","exitIndex","findIndex","f","t","halfXDist","abs","bezierX","max","d","Connections","get","to","newId","floor","toString","urlParams","URLSearchParams","window","location","search","require","amt","parseInt","amtConn","_","i","sqrt","allExits","generateModel","loadModel","ReactDOM","render","useState","initModel","setModel","camera","setCameraState","useRef","setCamera","cam","domTarget","useEffect","bbox","minX","reduce","acc","min","Infinity","maxX","minY","maxY","log","onWheel","active","deltaModeMultiplier","deltaMode","onPinch","origin","da","preventDefault","delta","initZoom","initPos","z","direction","velocity","onDoubleClick","clientX","clientY","eventOptions","passive","ref","viewBox","getElementById"],"mappings":"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","file":"static/js/main.e1499869.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { Coord } from \"../types\"\r\n\r\ninterface Camera {\r\n  zoom: number\r\n  position: Coord\r\n}\r\n\r\nconst initCamera: Camera = { zoom: 0, position: [0, 0] }\r\ninterface CameraRefContext {\r\n  cameraRef: React.RefObject<Camera>\r\n}\r\nconst CameraStateContext = React.createContext<Camera>({\r\n  zoom: 0,\r\n  position: [0, 0],\r\n})\r\nconst CameraSetStateContext = React.createContext<(c: Camera) => void>(() => {\r\n  throw new Error(\"Cannot set camera\")\r\n})\r\nconst CameraRefContext = React.createContext<React.RefObject<Camera>>({\r\n  current: null,\r\n})\r\n\r\nexport const CameraProvider: React.FC = ({ children }) => {\r\n  const [camera, setCameraState] = React.useState(initCamera)\r\n  const cameraRef = React.useRef(initCamera)\r\n\r\n  const setCamera = React.useCallback((cam: Camera) => {\r\n    setCameraState(cam)\r\n    cameraRef.current = cam\r\n  }, [])\r\n\r\n  return (\r\n    <CameraStateContext.Provider value={camera}>\r\n      <CameraSetStateContext.Provider value={setCamera}>\r\n        <CameraRefContext.Provider value={cameraRef}>\r\n          {children}\r\n        </CameraRefContext.Provider>\r\n      </CameraSetStateContext.Provider>\r\n    </CameraStateContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useCameraState = () => React.useContext(CameraStateContext)\r\nexport const useCameraSetState = () => React.useContext(CameraSetStateContext)\r\nexport const useCameraRef = () => React.useContext(CameraRefContext)\r\n","import { Card, Coord } from \"./types\"\r\n\r\n/**\r\n * Returns the pixel density for a given zoom level\r\n */\r\nexport const getPixelDensityForZoom = (zoom: number) => Math.exp(zoom)\r\n\r\nexport const getCanvasPosition = (\r\n  camPos: Coord,\r\n  camZoom: number,\r\n  mousePos: Coord,\r\n  canvasSize: Coord,\r\n) => {\r\n  const [camX, camY] = camPos\r\n  const [clientX, clientY] = mousePos\r\n  const [width, height] = canvasSize\r\n  const [dx, dy] = [clientX - width / 2, clientY - height / 2]\r\n  const pd = getPixelDensityForZoom(-camZoom)\r\n  return [camX + dx * pd, -camY - dy * pd]\r\n}\r\n\r\n/**\r\n * Returns a Bounding Box based on a collection of cards\r\n */\r\nexport const getModelBoundingBox = (cards: Card[]) => {\r\n  const minX = cards.reduce(\r\n    (acc, card) => Math.min(acc, card.position[0]),\r\n    Infinity,\r\n  )\r\n  const maxX = cards.reduce(\r\n    (acc, card) => Math.max(acc, card.position[0] + card.width),\r\n    -Infinity,\r\n  )\r\n  const minY = cards.reduce(\r\n    (acc, card) => Math.min(acc, card.position[1]),\r\n    Infinity,\r\n  )\r\n  const maxY = cards.reduce(\r\n    (acc, card) => Math.max(acc, card.position[1] + card.height),\r\n    -Infinity,\r\n  )\r\n  return { minX, maxX, minY, maxY }\r\n}\r\n\r\n/**\r\n * Sets the global cursor type\r\n */\r\nexport const setCursor = (cursor?: string) => {\r\n  if (cursor) {\r\n    document.documentElement.style.cursor = cursor\r\n  } else {\r\n    // @ts-expect-error\r\n    document.documentElement.style.cursor = null\r\n  }\r\n}\r\n\r\nconst pToGrid = (p: number) => Math.round(p / 50) * 50\r\nexport const positionToGrid = (pos: Coord): Coord => [\r\n  pToGrid(pos[0]),\r\n  pToGrid(pos[1]),\r\n]\r\n","import React from \"react\"\r\nimport { useCameraState } from \"../providers/CameraProvider\"\r\nimport { getPixelDensityForZoom } from \"../utils\"\r\n\r\nexport const CameraComponent: React.FC = ({ children }) => {\r\n  const { zoom, position } = useCameraState()\r\n  return (\r\n    <g\r\n      transform={`\r\n          translate(\r\n            ${document.documentElement.clientWidth / 2},\r\n            ${document.documentElement.clientHeight / 2}\r\n          )\r\n          scale(${getPixelDensityForZoom(zoom)})\r\n          translate(${-position[0]}, ${position[1]})\r\n        `}\r\n    >\r\n      {children}\r\n    </g>\r\n  )\r\n}\r\n","import React from \"react\"\r\n\r\ninterface CardConnectionDotProps {\r\n  isConnected: boolean\r\n  variant?: \"solution\"\r\n\r\n  cx?: number\r\n  cy?: number\r\n}\r\nexport const CardConnectionDot = ({\r\n  isConnected,\r\n  variant,\r\n  ...props\r\n}: CardConnectionDotProps) => {\r\n  return (\r\n    <circle\r\n      r={10}\r\n      stroke={\r\n        isConnected\r\n          ? variant === \"solution\"\r\n            ? \"#7f333e\"\r\n            : \"#3d3f4c\"\r\n          : \"#666666\"\r\n      }\r\n      fill={\r\n        isConnected\r\n          ? variant === \"solution\"\r\n            ? \"#7f333e\"\r\n            : \"#3d3f4c\"\r\n          : \"#FFFFFF\"\r\n      }\r\n      strokeWidth={3}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport { Card, CardExit, Connection, Model } from \"../types\"\r\n\r\ntype ModelContext = {\r\n  cardMap: Map<Card[\"id\"], Card>\r\n  connectionMap: Map<Connection[\"id\"], Connection>\r\n  cardFromExitMap: Map<CardExit[\"id\"], Card>\r\n  setCard: (id: Card[\"id\"], setter: (card: Card) => Card) => void\r\n}\r\nconst ModelContext = React.createContext<ModelContext>({\r\n  cardMap: new Map(),\r\n  connectionMap: new Map(),\r\n  cardFromExitMap: new Map(),\r\n  setCard: () => {\r\n    throw new Error(\"Uninitialized context: Cannot set card\")\r\n  },\r\n})\r\n\r\ninterface Props {\r\n  model: Model\r\n  onSetModel: (setter: (model: Model) => Model) => void\r\n}\r\nexport const ModelProvider: React.FC<Props> = ({\r\n  model,\r\n  onSetModel,\r\n  children,\r\n}) => {\r\n  const cardMap = React.useMemo(\r\n    () => new Map(model.cards.map(c => [c.id, c])),\r\n    [model.cards],\r\n  )\r\n  const connectionMap = React.useMemo(\r\n    () => new Map(model.connections.map(c => [c.id, c])),\r\n    [model.connections],\r\n  )\r\n  const cardFromExitMap = React.useMemo(\r\n    () => new Map(model.cards.flatMap(c => c.exits.map(e => [e.id, c]))),\r\n    [model.cards],\r\n  )\r\n  // const connectionsForCard = React.useMemo(\r\n  //   () => new Map(model.connections.map(conn => [conn.id])),\r\n  //   [model.cards],\r\n  // )\r\n  const setCard: ModelContext[\"setCard\"] = React.useCallback(\r\n    (cardId, set) =>\r\n      onSetModel(m => ({\r\n        ...m,\r\n        cards: m.cards.map(c => (c.id === cardId ? set(c) : c)),\r\n      })),\r\n    [onSetModel],\r\n  )\r\n  return (\r\n    <ModelContext.Provider\r\n      value={React.useMemo(\r\n        () => ({ cardMap, connectionMap, cardFromExitMap, setCard }),\r\n        [cardMap, connectionMap, cardFromExitMap, setCard],\r\n      )}\r\n    >\r\n      {children}\r\n    </ModelContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useModel = () => React.useContext(ModelContext)\r\n","// @ts-check\r\nimport React from \"react\"\r\nimport { useGesture } from \"react-use-gesture\"\r\n\r\nimport { getPixelDensityForZoom, positionToGrid, setCursor } from \"../utils\"\r\nimport { CardConnectionDot } from \"./cardConnectionDot\"\r\nimport { useModel } from \"../providers/ModelProvider\"\r\nimport { Card } from \"../types\"\r\nimport { useCameraRef } from \"../providers/CameraProvider\"\r\n\r\ninterface CardProps {\r\n  card: Card\r\n  onChangeCard: (id: Card[\"id\"], setter: (card: Card) => Card) => void\r\n}\r\nconst CardComponent = React.memo(function CardMemo({\r\n  card,\r\n  onChangeCard,\r\n}: CardProps) {\r\n  const cameraRef = useCameraRef()\r\n\r\n  const setPartialCard = (\r\n    getPartial: Partial<Card> | ((card: Card) => Partial<Card>),\r\n  ) =>\r\n    onChangeCard(card.id, c => ({\r\n      ...c,\r\n      ...(typeof getPartial === \"function\" ? getPartial(c) : getPartial),\r\n    }))\r\n\r\n  const bind = useGesture(\r\n    {\r\n      // DEBUG\r\n      // @ts-expect-error events\r\n      onClick: ({ event: { ctrlKey, altKey } }) => {\r\n        if (ctrlKey) {\r\n          setPartialCard({ height: 20 + Math.random() * 400 })\r\n          return\r\n        }\r\n\r\n        if (altKey) {\r\n          setPartialCard(c => ({\r\n            variant: c.variant === \"solution\" ? undefined : \"solution\",\r\n          }))\r\n        }\r\n      },\r\n      onDragStart: () => {\r\n        setCursor(\"grabbing\")\r\n      },\r\n      onDragEnd: ({ movement: [mx, my], memo }) => {\r\n        setCursor()\r\n        if (!memo) return\r\n        const pixelDensity = getPixelDensityForZoom(\r\n          cameraRef.current?.zoom ?? 0,\r\n        )\r\n        setPartialCard({\r\n          position: positionToGrid([\r\n            memo[0] + mx / pixelDensity,\r\n            memo[1] + my / pixelDensity,\r\n          ]),\r\n        })\r\n      },\r\n      onDrag: ({ buttons, movement: [mx, my], memo }) => {\r\n        // Only allow left-click drags\r\n        if (buttons !== 1) {\r\n          return\r\n        }\r\n        setCursor(\"grabbing\")\r\n        if (!memo) {\r\n          memo = card.position\r\n        }\r\n        const pixelDensity = getPixelDensityForZoom(\r\n          cameraRef.current?.zoom ?? 0,\r\n        )\r\n        setPartialCard({\r\n          position: [memo[0] + mx / pixelDensity, memo[1] + my / pixelDensity],\r\n        })\r\n        return memo\r\n      },\r\n    },\r\n    // @ts-expect-error\r\n    { pointerEvents: true, drag: { threshold: 10 } },\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <g transform={`translate(${card.position[0]}, ${card.position[1]})`}>\r\n        {/* BODY */}\r\n\r\n        <rect\r\n          width={card.width}\r\n          height={card.height}\r\n          fill={card.variant === \"solution\" ? \"#7f333e\" : \"#3d3f4c\"}\r\n          rx={10}\r\n          {...bind()}\r\n        />\r\n\r\n        <CardConnectionDot\r\n          // isConnected={connections.some(c => c.to === card.id)}\r\n          isConnected={true}\r\n          variant={card.variant}\r\n          cy={card.height / 2}\r\n        />\r\n\r\n        {card.exits.map((exit, index) => (\r\n          <CardConnectionDot\r\n            key={exit.id}\r\n            // isConnected={connections.some(c => exit.id === c.from)}\r\n            isConnected={true}\r\n            variant={card.variant}\r\n            cx={card.width}\r\n            cy={(card.height * (1 + index)) / (1 + card.exits.length)}\r\n          />\r\n        ))}\r\n      </g>\r\n    </>\r\n  )\r\n})\r\n\r\nexport const Cards = () => {\r\n  const { cardMap, setCard } = useModel()\r\n  return (\r\n    <g id=\"cards\">\r\n      {Array.from(cardMap.values()).map(card => (\r\n        <CardComponent key={card.id} card={card} onChangeCard={setCard} />\r\n      ))}\r\n    </g>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport { useModel } from \"../providers/ModelProvider\"\r\n\r\nimport { Card, Connection, Coord } from \"../types\"\r\n\r\ninterface Props {\r\n  connection: Connection\r\n  fromCard: Card\r\n  toCard: Card\r\n}\r\nconst ConnectionComponent = React.memo(function ConnectionComponent({\r\n  connection,\r\n  fromCard,\r\n  toCard,\r\n}: Props) {\r\n  const exitIndex = fromCard.exits.findIndex(e => e.id === connection.from)\r\n  const f: Coord = [\r\n    fromCard.position[0] + fromCard.width,\r\n    fromCard.position[1] +\r\n      (fromCard.height * (1 + exitIndex)) / (fromCard.exits.length + 1),\r\n  ]\r\n  const t: Coord = [toCard.position[0], toCard.position[1] + toCard.height / 2]\r\n  const halfXDist = Math.abs((t[0] - f[0]) / 2)\r\n  const bezierX = Math.max(50, halfXDist)\r\n\r\n  return (\r\n    <path\r\n      d={`\r\n        M ${f[0]} ${f[1]}\r\n        C ${f[0] + bezierX} ${f[1]} ${t[0] - bezierX} ${t[1]} ${t[0]} ${t[1]}\r\n      `}\r\n      fill=\"none\"\r\n      strokeWidth={4}\r\n      stroke={toCard.variant === \"solution\" ? \"#7f333e\" : \"#3d3f4c\"}\r\n    />\r\n  )\r\n})\r\n\r\nexport const Connections = () => {\r\n  const { connectionMap, cardMap, cardFromExitMap } = useModel()\r\n\r\n  return (\r\n    <g id=\"connections\">\r\n      {Array.from(connectionMap.values()).map(connection => {\r\n        const from = cardFromExitMap.get(connection.from)\r\n        const to = cardMap.get(connection.to)\r\n        if (!from || !to) return null\r\n        return (\r\n          <ConnectionComponent\r\n            key={connection.id}\r\n            connection={connection}\r\n            fromCard={from}\r\n            toCard={to}\r\n          />\r\n        )\r\n      })}\r\n    </g>\r\n  )\r\n}\r\n","import { Card, Connection, Model } from \"./types\"\r\nimport { positionToGrid } from \"./utils\"\r\n\r\nconst newId = function <TBrand = unknown>() {\r\n  return Math.floor(Math.random() * 10000000).toString() as string & {\r\n    __brand: TBrand\r\n  }\r\n}\r\n\r\n/**\r\n * Generates a parametric model\r\n */\r\nconst generateModel = (amt: number, amtConn: number) => {\r\n  const cards = new Array(amt).fill(null).map<Card>((_, i) => ({\r\n    id: newId(),\r\n    position: positionToGrid([\r\n      (0.5 - Math.random()) * Math.sqrt(amt) * 1000,\r\n      (0.5 - Math.random()) * Math.sqrt(amt) * 1000,\r\n    ]),\r\n    height: Math.round((0.5 + Math.random()) * 200),\r\n    width: 120,\r\n    variant: Math.random() > 0.8 ? \"solution\" : undefined,\r\n    exits: new Array(Math.floor(Math.random() * 4)).fill(null).map(_ => ({\r\n      id: newId(),\r\n    })),\r\n  }))\r\n\r\n  const allExits = cards.flatMap(c => c.exits)\r\n\r\n  const connections = new Array(Math.round(amtConn))\r\n    .fill(0)\r\n    .map<Connection>(() => {\r\n      return {\r\n        id: newId(),\r\n        from:\r\n          allExits[Math.max(0, Math.floor(Math.random() * allExits.length - 1))]\r\n            .id,\r\n        to: cards[Math.max(0, Math.floor(Math.random() * cards.length - 1))].id,\r\n      }\r\n    })\r\n\r\n  return { cards, connections }\r\n}\r\n\r\nconst loadModel = (): Model => {\r\n  const urlParams = new URLSearchParams(window.location.search)\r\n  if (urlParams.get(\"model\") === \"1\") {\r\n    return require(\"./models/1.json\")\r\n  } else {\r\n    const amt = parseInt(urlParams.get(\"amt\") ?? \"\") || 50\r\n    return generateModel(amt, amt * 0.8)\r\n  }\r\n}\r\n\r\nexport const model = loadModel()\r\n","// @ts-check\r\nimport React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport { useGesture } from \"react-use-gesture\"\r\n\r\nimport { CameraComponent } from \"./three/cameraComponent\"\r\nimport { Cards } from \"./three/card\"\r\nimport { Connections } from \"./three/connections\"\r\nimport { getModelBoundingBox, getPixelDensityForZoom } from \"./utils\"\r\nimport { model as initModel } from \"./store\"\r\n\r\nimport \"./index.css\"\r\nimport { Coord } from \"./types\"\r\nimport { ModelProvider, useModel } from \"./providers/ModelProvider\"\r\nimport {\r\n  CameraProvider,\r\n  useCameraRef,\r\n  useCameraSetState,\r\n} from \"./providers/CameraProvider\"\r\n\r\nconst App = () => {\r\n  const cameraRef = useCameraRef()\r\n  const setCamera = useCameraSetState()\r\n\r\n  const domTarget = React.useRef<SVGSVGElement>(null)\r\n  const { cardMap } = useModel()\r\n\r\n  React.useEffect(() => {\r\n    const bbox = getModelBoundingBox(Array.from(cardMap.values()))\r\n    setCamera({\r\n      position: [\r\n        (bbox.maxX + bbox.minX) / 2,\r\n        -(bbox.maxY + bbox.minY) / 2,\r\n      ] as Coord,\r\n      zoom: -Math.log(\r\n        Math.max(\r\n          (bbox.maxY - bbox.minY + 200) / document.documentElement.clientHeight,\r\n          (bbox.maxX - bbox.minX + 200) / document.documentElement.clientWidth,\r\n        ),\r\n      ),\r\n    })\r\n    // Init effect, do not run when the model changes\r\n    // eslint-disable-next-line\r\n  }, [])\r\n\r\n  useGesture(\r\n    {\r\n      onWheel: ({ event, movement, memo, active }) => {\r\n        if (!event) return\r\n\r\n        /** @see https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaMode */\r\n        const deltaModeMultiplier = event.deltaMode === 0x00 ? 1 : 20\r\n\r\n        // Initialize the memo\r\n        if (!memo) {\r\n          memo = cameraRef.current?.position\r\n        }\r\n\r\n        const pixelDensity = getPixelDensityForZoom(cameraRef.current!.zoom)\r\n\r\n        setCamera({\r\n          ...cameraRef.current!,\r\n          position: [\r\n            (movement[0] / pixelDensity) * deltaModeMultiplier + memo[0],\r\n            -(movement[1] / pixelDensity) * deltaModeMultiplier + memo[1],\r\n          ],\r\n        })\r\n\r\n        return memo\r\n      },\r\n      onPinch: ({ event, origin, da: [d], memo }) => {\r\n        event.preventDefault()\r\n        // sensitivity fix\r\n        const delta = d / 50\r\n        if (!memo) {\r\n          memo = {\r\n            delta,\r\n            initZoom: cameraRef.current!.zoom,\r\n            initPos: cameraRef.current!.position,\r\n          }\r\n        }\r\n        const z = memo.initZoom + delta - memo.delta\r\n        setCamera({ ...cameraRef.current!, zoom: z })\r\n\r\n        // // Scroll towards where the mouse is located\r\n        // const { width, height } = domTarget.current.getBoundingClientRect()\r\n        // const [tx, ty] = getCanvasPosition(position.get(), z, origin, [\r\n        //   width,\r\n        //   height,\r\n        // ])\r\n        // const c = getPixelDensityForZoom(memo.delta-delta)\r\n        // const newPosition = [\r\n        //   memo.initPos[0] * c + (1 - c) * tx,\r\n        //   memo.initPos[1] * c - (1 - c) * ty,\r\n        // ]\r\n        // setPosition({ position: newPosition })\r\n\r\n        return memo\r\n      },\r\n      onDrag: ({ buttons, active, movement, direction, velocity, memo }) => {\r\n        // only allow the wheel to drag the canvas\r\n        /** @see https://developer.mozilla.org/fr/docs/Web/API/MouseEvent/buttons */\r\n        if (buttons !== 4) {\r\n          return\r\n        }\r\n\r\n        // Initialize the memo\r\n        if (!memo) {\r\n          memo = cameraRef.current!.position\r\n        }\r\n\r\n        const pixelDensity = getPixelDensityForZoom(cameraRef.current!.zoom)\r\n\r\n        setCamera({\r\n          ...cameraRef.current!,\r\n          position: movement.map((m, i) => m * pixelDensity + memo[i]) as Coord,\r\n        })\r\n        return memo\r\n      },\r\n      // Add a card\r\n      // @ts-expect-error clientX, Y and ctrlKey\r\n      onDoubleClick: ({ event: { clientX, clientY, ctrlKey } }) => {\r\n        // if (!domTarget.current) return\r\n        // const { width, height } = domTarget.current.getBoundingClientRect()\r\n        // const [cx, cy] = getCanvasPosition(\r\n        //   position,\r\n        //   zoom,\r\n        //   [clientX, clientY],\r\n        //   [width, height],\r\n        // )\r\n        // RE-TODO\r\n        // addCard({\r\n        //   height: 200,\r\n        //   width: 120,\r\n        //   position: [cx - 60, cy - 100],\r\n        //   exits: [],\r\n        // })\r\n      },\r\n    },\r\n    { domTarget, eventOptions: { passive: false } },\r\n  )\r\n\r\n  return (\r\n    <svg\r\n      ref={domTarget}\r\n      viewBox={`0 0 ${document.documentElement.clientWidth} ${document.documentElement.clientHeight}`}\r\n    >\r\n      <CameraComponent>\r\n        <Connections />\r\n        <Cards />\r\n      </CameraComponent>\r\n    </svg>\r\n  )\r\n}\r\n\r\nconst WithModel: React.FC = ({ children }) => {\r\n  const [model, setModel] = React.useState(initModel)\r\n\r\n  return (\r\n    <ModelProvider model={model} onSetModel={setModel}>\r\n      {children}\r\n    </ModelProvider>\r\n  )\r\n}\r\n\r\nReactDOM.render(\r\n  <WithModel>\r\n    <CameraProvider>\r\n      <App />\r\n    </CameraProvider>\r\n  </WithModel>,\r\n  document.getElementById(\"root\"),\r\n)\r\n"],"sourceRoot":""}