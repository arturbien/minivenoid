{"version":3,"sources":["providers/CameraProvider.tsx","utils.ts","three/cameraComponent.tsx","three/cardConnectionDot.tsx","providers/ModelProvider.tsx","three/FOResizer.tsx","store.ts","three/card.tsx","three/connections.tsx","index.tsx"],"names":["initCamera","zoom","position","CameraStateContext","React","createContext","CameraSetStateContext","Error","CameraRefContext","current","useCameraRef","useContext","getPixelDensityForZoom","Math","exp","setCursor","cursor","document","documentElement","style","pToGrid","p","round","positionToGrid","pos","CameraComponent","children","transform","clientWidth","clientHeight","CardConnectionDot","isConnected","isSolution","props","r","stroke","fill","strokeWidth","ModelContext","cardMap","Map","connectionMap","setCard","ModelProvider","model","onSetModel","useMemo","cards","map","c","id","connections","useCallback","cardId","set","m","Provider","value","useModel","FOResizer","cameraRef","foreignObjectRef","useRef","innerDivRef","useLayoutEffect","divRect","getBoundingClientRect","density","height","width","setAttribute","ref","newId","floor","random","toString","baseTextSplit","split","genText","filter","sort","join","urlParams","URLSearchParams","window","location","search","get","require","amt","parseInt","amtConn","Array","_","i","sqrt","type","text","from","max","length","to","generateModel","loadModel","CardComponent","memo","card","onChangeCard","setPartialCard","getPartial","bind","useGesture","onClick","event","altKey","onDragStart","onDragEnd","movement","mx","my","pixelDensity","onDrag","buttons","pointerEvents","drag","threshold","display","flexDirection","padding","borderRadius","boxSizing","backgroundColor","color","cx","Cards","values","key","ConnectionComponent","connection","fromCard","toCard","f","t","halfXDist","abs","bezierX","d","Connections","ReactDOM","render","useState","initModel","setModel","camera","setCameraState","setCamera","cam","domTarget","useEffect","bbox","minX","reduce","acc","min","Infinity","maxX","minY","maxY","log","onWheel","active","deltaModeMultiplier","deltaMode","onPinch","origin","da","preventDefault","delta","initZoom","initPos","z","direction","velocity","onDoubleClick","clientX","clientY","ctrlKey","eventOptions","passive","userSelect","viewBox","getElementById"],"mappings":"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","file":"static/js/main.7dc7b8f6.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { Coord } from \"../types\"\r\n\r\ninterface Camera {\r\n  zoom: number\r\n  position: Coord\r\n}\r\n\r\nconst initCamera: Camera = { zoom: 0, position: [0, 0] }\r\ninterface CameraRefContext {\r\n  cameraRef: React.RefObject<Camera>\r\n}\r\nconst CameraStateContext = React.createContext<Camera>({\r\n  zoom: 0,\r\n  position: [0, 0],\r\n})\r\nconst CameraSetStateContext = React.createContext<(c: Camera) => void>(() => {\r\n  throw new Error(\"Cannot set camera\")\r\n})\r\nconst CameraRefContext = React.createContext<React.RefObject<Camera>>({\r\n  current: null,\r\n})\r\n\r\nexport const CameraProvider: React.FC = ({ children }) => {\r\n  const [camera, setCameraState] = React.useState(initCamera)\r\n  const cameraRef = React.useRef(initCamera)\r\n\r\n  const setCamera = React.useCallback((cam: Camera) => {\r\n    setCameraState(cam)\r\n    cameraRef.current = cam\r\n  }, [])\r\n\r\n  return (\r\n    <CameraStateContext.Provider value={camera}>\r\n      <CameraSetStateContext.Provider value={setCamera}>\r\n        <CameraRefContext.Provider value={cameraRef}>\r\n          {children}\r\n        </CameraRefContext.Provider>\r\n      </CameraSetStateContext.Provider>\r\n    </CameraStateContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useCameraState = () => React.useContext(CameraStateContext)\r\nexport const useCameraSetState = () => React.useContext(CameraSetStateContext)\r\nexport const useCameraRef = () => React.useContext(CameraRefContext)\r\n","import { Card, Coord } from \"./types\"\r\n\r\n/**\r\n * Returns the pixel density for a given zoom level\r\n */\r\nexport const getPixelDensityForZoom = (zoom: number) => Math.exp(zoom)\r\n\r\nexport const getCanvasPosition = (\r\n  camPos: Coord,\r\n  camZoom: number,\r\n  mousePos: Coord,\r\n  canvasSize: Coord,\r\n) => {\r\n  const [camX, camY] = camPos\r\n  const [clientX, clientY] = mousePos\r\n  const [width, height] = canvasSize\r\n  const [dx, dy] = [clientX - width / 2, clientY - height / 2]\r\n  const pd = getPixelDensityForZoom(-camZoom)\r\n  return [camX + dx * pd, -camY - dy * pd]\r\n}\r\n\r\n/**\r\n * Returns a Bounding Box based on a collection of cards\r\n */\r\nexport const getModelBoundingBox = (cards: Card[]) => {\r\n  const minX = cards.reduce(\r\n    (acc, card) => Math.min(acc, card.position[0]),\r\n    Infinity,\r\n  )\r\n  const maxX = cards.reduce(\r\n    (acc, card) => Math.max(acc, card.position[0]),\r\n    -Infinity,\r\n  )\r\n  const minY = cards.reduce(\r\n    (acc, card) => Math.min(acc, card.position[1]),\r\n    Infinity,\r\n  )\r\n  const maxY = cards.reduce(\r\n    (acc, card) => Math.max(acc, card.position[1]),\r\n    -Infinity,\r\n  )\r\n  return { minX, maxX, minY, maxY }\r\n}\r\n\r\n/**\r\n * Sets the global cursor type\r\n */\r\nexport const setCursor = (cursor?: string) => {\r\n  if (cursor) {\r\n    document.documentElement.style.cursor = cursor\r\n  } else {\r\n    // @ts-expect-error\r\n    document.documentElement.style.cursor = null\r\n  }\r\n}\r\n\r\nconst pToGrid = (p: number) => Math.round(p / 50) * 50\r\nexport const positionToGrid = (pos: Coord): Coord => [\r\n  pToGrid(pos[0]),\r\n  pToGrid(pos[1]),\r\n]\r\n","import React from \"react\"\r\nimport { useCameraState } from \"../providers/CameraProvider\"\r\nimport { getPixelDensityForZoom } from \"../utils\"\r\n\r\nexport const CameraComponent: React.FC = ({ children }) => {\r\n  const { zoom, position } = useCameraState()\r\n  return (\r\n    <g\r\n      transform={`\r\n          translate(\r\n            ${document.documentElement.clientWidth / 2},\r\n            ${document.documentElement.clientHeight / 2}\r\n          )\r\n          scale(${getPixelDensityForZoom(zoom)})\r\n          translate(${-position[0]}, ${position[1]})\r\n        `}\r\n    >\r\n      {children}\r\n    </g>\r\n  )\r\n}\r\n","import React from \"react\"\r\n\r\ninterface CardConnectionDotProps {\r\n  isConnected: boolean\r\n  isSolution: boolean\r\n\r\n  cx?: number\r\n  cy?: number\r\n}\r\nexport const CardConnectionDot = ({\r\n  isConnected,\r\n  isSolution,\r\n  ...props\r\n}: CardConnectionDotProps) => {\r\n  return (\r\n    <circle\r\n      r={10}\r\n      stroke={isConnected ? (isSolution ? \"#7f333e\" : \"#3d3f4c\") : \"#666666\"}\r\n      fill={isConnected ? (isSolution ? \"#7f333e\" : \"#3d3f4c\") : \"#FFFFFF\"}\r\n      strokeWidth={3}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport { Card, Connection, Model } from \"../types\"\r\n\r\ntype ModelContext = {\r\n  cardMap: Map<Card[\"id\"], Card>\r\n  connectionMap: Map<Connection[\"id\"], Connection>\r\n  setCard: (id: Card[\"id\"], setter: (card: Card) => Card) => void\r\n}\r\nconst ModelContext = React.createContext<ModelContext>({\r\n  cardMap: new Map(),\r\n  connectionMap: new Map(),\r\n  setCard: () => {\r\n    throw new Error(\"Uninitialized context: Cannot set card\")\r\n  },\r\n})\r\n\r\ninterface Props {\r\n  model: Model\r\n  onSetModel: (setter: (model: Model) => Model) => void\r\n}\r\nexport const ModelProvider: React.FC<Props> = ({\r\n  model,\r\n  onSetModel,\r\n  children,\r\n}) => {\r\n  const cardMap = React.useMemo(\r\n    () => new Map(model.cards.map(c => [c.id, c])),\r\n    [model.cards],\r\n  )\r\n  const connectionMap = React.useMemo(\r\n    () => new Map(model.connections.map(c => [c.id, c])),\r\n    [model.connections],\r\n  )\r\n  // const connectionsForCard = React.useMemo(\r\n  //   () => new Map(model.connections.map(conn => [conn.id])),\r\n  //   [model.cards],\r\n  // )\r\n  const setCard: ModelContext[\"setCard\"] = React.useCallback(\r\n    (cardId, set) =>\r\n      onSetModel(m => ({\r\n        ...m,\r\n        cards: m.cards.map(c => (c.id === cardId ? set(c) : c)),\r\n      })),\r\n    [onSetModel],\r\n  )\r\n  return (\r\n    <ModelContext.Provider\r\n      value={React.useMemo(() => ({ cardMap, connectionMap, setCard }), [\r\n        cardMap,\r\n        connectionMap,\r\n        setCard,\r\n      ])}\r\n    >\r\n      {children}\r\n    </ModelContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useModel = () => React.useContext(ModelContext)\r\n","import React from \"react\"\nimport { useCameraRef } from \"../providers/CameraProvider\"\nimport { getPixelDensityForZoom } from \"../utils\"\n\nexport const FOResizer: React.FC<\n  React.SVGAttributes<SVGForeignObjectElement>\n> = ({ children, ...props }) => {\n  const cameraRef = useCameraRef()\n  const foreignObjectRef = React.useRef<SVGForeignObjectElement>(null)\n  const innerDivRef = React.useRef<HTMLDivElement>(null)\n\n  React.useLayoutEffect(() => {\n    if (!foreignObjectRef.current || !innerDivRef.current) return\n    const divRect = innerDivRef.current.getBoundingClientRect()\n    const density = getPixelDensityForZoom(cameraRef.current!.zoom)\n    const height = divRect.height / density\n    const width = divRect.width / density\n    foreignObjectRef.current.setAttribute(\"width\", `${width}`)\n    foreignObjectRef.current.setAttribute(\"height\", `${height}`)\n    foreignObjectRef.current.setAttribute(\"x\", `${-width / 2}`)\n    foreignObjectRef.current.setAttribute(\"y\", `${-height / 2}`)\n  })\n\n  return (\n    <foreignObject ref={foreignObjectRef} {...props}>\n      <div\n        style={{ width: \"max-content\", height: \"max-content\" }}\n        ref={innerDivRef}\n      >\n        {children}\n      </div>\n    </foreignObject>\n  )\n}\n","import { Card, Connection, Model } from \"./types\"\r\nimport { positionToGrid } from \"./utils\"\r\n\r\nconst newId = function <TBrand = unknown>() {\r\n  return Math.floor(Math.random() * 10000000).toString() as string & {\r\n    __brand: TBrand\r\n  }\r\n}\r\n\r\nconst baseTextSplit = `Spicy jalapeno bacon ipsum dolor amet dolore shoulder spare ribs enim tenderloin jerky. Doner enim beef ribs incididunt laboris t-bone ea dolore consectetur turducken short loin. Ut short loin bacon excepteur id ham hock flank culpa brisket. Swine velit cupidatat, qui leberkas ad andouille lorem hamburger labore pancetta sunt in fatback tri-tip. Lorem porchetta minim cupim. Fatback pork chop beef, qui culpa ham ullamco.`.split(\r\n  \" \",\r\n)\r\n\r\nexport const genText = () =>\r\n  baseTextSplit\r\n    .filter(() => Math.random() < 0.2)\r\n    .sort(() => Math.random() - 0.5)\r\n    .join(\" \")\r\n\r\n/**\r\n * Generates a parametric model\r\n */\r\nconst generateModel = (amt: number, amtConn: number): Model => {\r\n  const cards = new Array(amt).fill(null).map<Card>((_, i) => ({\r\n    id: newId(),\r\n    position: positionToGrid([\r\n      (0.5 - Math.random()) * Math.sqrt(amt) * 1000,\r\n      (0.5 - Math.random()) * Math.sqrt(amt) * 1000,\r\n    ]),\r\n    type: Math.random() > 0.8 ? \"solution\" : \"problem\",\r\n    text: genText(),\r\n  }))\r\n\r\n  const connections = new Array(Math.round(amtConn))\r\n    .fill(0)\r\n    .map<Connection>(() => {\r\n      return {\r\n        id: newId(),\r\n        from:\r\n          cards[Math.max(0, Math.floor(Math.random() * cards.length - 1))].id,\r\n        to: cards[Math.max(0, Math.floor(Math.random() * cards.length - 1))].id,\r\n      }\r\n    })\r\n\r\n  return { cards, connections }\r\n}\r\n\r\nconst loadModel = (): Model => {\r\n  const urlParams = new URLSearchParams(window.location.search)\r\n  if (urlParams.get(\"model\") === \"1\") {\r\n    return require(\"./models/1.json\")\r\n  } else {\r\n    const amt = parseInt(urlParams.get(\"amt\") ?? \"\") || 50\r\n    return generateModel(amt, amt * 0.8)\r\n  }\r\n}\r\n\r\nexport const model = loadModel()\r\n","// @ts-check\r\nimport React from \"react\"\r\nimport { useGesture } from \"react-use-gesture\"\r\n\r\nimport { getPixelDensityForZoom, positionToGrid, setCursor } from \"../utils\"\r\nimport { CardConnectionDot } from \"./cardConnectionDot\"\r\nimport { useModel } from \"../providers/ModelProvider\"\r\nimport { Card } from \"../types\"\r\nimport { useCameraRef } from \"../providers/CameraProvider\"\r\nimport { FOResizer } from \"./FOResizer\"\r\nimport { genText } from \"../store\"\r\n\r\ninterface CardProps {\r\n  card: Card\r\n  onChangeCard: (id: Card[\"id\"], setter: (card: Card) => Card) => void\r\n}\r\nconst CardComponent = React.memo(function CardMemo({\r\n  card,\r\n  onChangeCard,\r\n}: CardProps) {\r\n  const cameraRef = useCameraRef()\r\n\r\n  const setPartialCard = (\r\n    getPartial: Partial<Card> | ((card: Card) => Partial<Card>),\r\n  ) =>\r\n    onChangeCard(card.id, c => ({\r\n      ...c,\r\n      ...(typeof getPartial === \"function\" ? getPartial(c) : getPartial),\r\n    }))\r\n\r\n  const bind = useGesture(\r\n    {\r\n      // @ts-expect-error\r\n      onClick: ({ event: { altKey } }) => {\r\n        if (altKey) {\r\n          setPartialCard({ text: genText() })\r\n        }\r\n      },\r\n      onDragStart: () => {\r\n        setCursor(\"grabbing\")\r\n      },\r\n      onDragEnd: ({ movement: [mx, my], memo }) => {\r\n        setCursor()\r\n        if (!memo) return\r\n        const pixelDensity = getPixelDensityForZoom(\r\n          cameraRef.current?.zoom ?? 0,\r\n        )\r\n        setPartialCard({\r\n          position: positionToGrid([\r\n            memo[0] + mx / pixelDensity,\r\n            memo[1] + my / pixelDensity,\r\n          ]),\r\n        })\r\n      },\r\n      onDrag: ({ buttons, movement: [mx, my], memo }) => {\r\n        // Only allow left-click drags\r\n        if (buttons !== 1) {\r\n          return\r\n        }\r\n        setCursor(\"grabbing\")\r\n        if (!memo) {\r\n          memo = card.position\r\n        }\r\n        const pixelDensity = getPixelDensityForZoom(cameraRef.current!.zoom)\r\n        setPartialCard({\r\n          position: [memo[0] + mx / pixelDensity, memo[1] + my / pixelDensity],\r\n        })\r\n        return memo\r\n      },\r\n    },\r\n    // @ts-expect-error\r\n    { pointerEvents: true, drag: { threshold: 10 } },\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <g transform={`translate(${card.position[0]}, ${card.position[1]})`}>\r\n        {/* BODY */}\r\n\r\n        <FOResizer {...bind()}>\r\n          <div>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                padding: 16,\r\n                width: 160,\r\n                borderRadius: 16,\r\n                boxSizing: \"border-box\",\r\n                backgroundColor:\r\n                  card.type === \"solution\" ? \"#7f333e\" : \"#3d3f4c\",\r\n                color: \"white\",\r\n              }}\r\n            >\r\n              <strong>\r\n                {card.type === \"solution\" ? \"Solution\" : \"Problem\"}\r\n              </strong>\r\n              <div style={{ height: 8 }} />\r\n              <span>{card.text}</span>\r\n            </div>\r\n          </div>\r\n        </FOResizer>\r\n\r\n        <CardConnectionDot\r\n          // isConnected={connections.some(c => c.to === card.id)}\r\n          isConnected={true}\r\n          isSolution={card.type === \"solution\"}\r\n          cx={-160 / 2}\r\n        />\r\n\r\n        <CardConnectionDot\r\n          // isConnected={connections.some(c => exit.id === c.from)}\r\n          isConnected={true}\r\n          isSolution={card.type === \"solution\"}\r\n          cx={160 / 2}\r\n        />\r\n      </g>\r\n    </>\r\n  )\r\n})\r\n\r\nexport const Cards = () => {\r\n  const { cardMap, setCard } = useModel()\r\n  return (\r\n    <g id=\"cards\">\r\n      {Array.from(cardMap.values()).map(card => (\r\n        <CardComponent key={card.id} card={card} onChangeCard={setCard} />\r\n      ))}\r\n    </g>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport { useModel } from \"../providers/ModelProvider\"\r\n\r\nimport { Card, Connection, Coord } from \"../types\"\r\n\r\ninterface Props {\r\n  connection: Connection\r\n  fromCard: Card\r\n  toCard: Card\r\n}\r\nconst ConnectionComponent = React.memo(function ConnectionComponent({\r\n  connection,\r\n  fromCard,\r\n  toCard,\r\n}: Props) {\r\n  const f: Coord = [fromCard.position[0] + 160 / 2, fromCard.position[1]]\r\n  const t: Coord = [toCard.position[0] - 160 / 2, toCard.position[1]]\r\n  const halfXDist = Math.abs((t[0] - f[0]) / 2)\r\n  const bezierX = Math.max(50, halfXDist)\r\n\r\n  return (\r\n    <path\r\n      d={`\r\n        M ${f[0]} ${f[1]}\r\n        C ${f[0] + bezierX} ${f[1]} ${t[0] - bezierX} ${t[1]} ${t[0]} ${t[1]}\r\n      `}\r\n      fill=\"none\"\r\n      strokeWidth={4}\r\n      stroke={toCard.text === \"solution\" ? \"#7f333e\" : \"#3d3f4c\"}\r\n    />\r\n  )\r\n})\r\n\r\nexport const Connections = () => {\r\n  const { connectionMap, cardMap } = useModel()\r\n\r\n  return (\r\n    <g id=\"connections\">\r\n      {Array.from(connectionMap.values()).map(connection => {\r\n        const from = cardMap.get(connection.from)\r\n        const to = cardMap.get(connection.to)\r\n        if (!from || !to) return null\r\n        return (\r\n          <ConnectionComponent\r\n            key={connection.id}\r\n            connection={connection}\r\n            fromCard={from}\r\n            toCard={to}\r\n          />\r\n        )\r\n      })}\r\n    </g>\r\n  )\r\n}\r\n","// @ts-check\r\nimport React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport { useGesture } from \"react-use-gesture\"\r\n\r\nimport { CameraComponent } from \"./three/cameraComponent\"\r\nimport { Cards } from \"./three/card\"\r\nimport { Connections } from \"./three/connections\"\r\nimport { getModelBoundingBox, getPixelDensityForZoom } from \"./utils\"\r\nimport { model as initModel } from \"./store\"\r\n\r\nimport \"./index.css\"\r\nimport { Coord } from \"./types\"\r\nimport { ModelProvider, useModel } from \"./providers/ModelProvider\"\r\nimport {\r\n  CameraProvider,\r\n  useCameraRef,\r\n  useCameraSetState,\r\n} from \"./providers/CameraProvider\"\r\n\r\nconst App = () => {\r\n  const cameraRef = useCameraRef()\r\n  const setCamera = useCameraSetState()\r\n\r\n  const domTarget = React.useRef<SVGSVGElement>(null)\r\n  const { cardMap } = useModel()\r\n\r\n  React.useEffect(() => {\r\n    const bbox = getModelBoundingBox(Array.from(cardMap.values()))\r\n    setCamera({\r\n      position: [\r\n        (bbox.maxX + bbox.minX) / 2,\r\n        -(bbox.maxY + bbox.minY) / 2,\r\n      ] as Coord,\r\n      zoom: -Math.log(\r\n        Math.max(\r\n          (bbox.maxY - bbox.minY + 200) / document.documentElement.clientHeight,\r\n          (bbox.maxX - bbox.minX + 200) / document.documentElement.clientWidth,\r\n        ),\r\n      ),\r\n    })\r\n    // Init effect, do not run when the model changes\r\n    // eslint-disable-next-line\r\n  }, [])\r\n\r\n  useGesture(\r\n    {\r\n      onWheel: ({ event, movement, memo, active }) => {\r\n        if (!event) return\r\n\r\n        /** @see https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaMode */\r\n        const deltaModeMultiplier = event.deltaMode === 0x00 ? 1 : 20\r\n\r\n        // Initialize the memo\r\n        if (!memo) {\r\n          memo = cameraRef.current?.position\r\n        }\r\n\r\n        const pixelDensity = getPixelDensityForZoom(cameraRef.current!.zoom)\r\n\r\n        setCamera({\r\n          ...cameraRef.current!,\r\n          position: [\r\n            (movement[0] / pixelDensity) * deltaModeMultiplier + memo[0],\r\n            -(movement[1] / pixelDensity) * deltaModeMultiplier + memo[1],\r\n          ],\r\n        })\r\n\r\n        return memo\r\n      },\r\n      onPinch: ({ event, origin, da: [d], memo }) => {\r\n        event.preventDefault()\r\n        // sensitivity fix\r\n        const delta = d / 50\r\n        if (!memo) {\r\n          memo = {\r\n            delta,\r\n            initZoom: cameraRef.current!.zoom,\r\n            initPos: cameraRef.current!.position,\r\n          }\r\n        }\r\n        const z = memo.initZoom + delta - memo.delta\r\n        setCamera({ ...cameraRef.current!, zoom: z })\r\n\r\n        // // Scroll towards where the mouse is located\r\n        // const { width, height } = domTarget.current.getBoundingClientRect()\r\n        // const [tx, ty] = getCanvasPosition(position.get(), z, origin, [\r\n        //   width,\r\n        //   height,\r\n        // ])\r\n        // const c = getPixelDensityForZoom(memo.delta-delta)\r\n        // const newPosition = [\r\n        //   memo.initPos[0] * c + (1 - c) * tx,\r\n        //   memo.initPos[1] * c - (1 - c) * ty,\r\n        // ]\r\n        // setPosition({ position: newPosition })\r\n\r\n        return memo\r\n      },\r\n      onDrag: ({ buttons, active, movement, direction, velocity, memo }) => {\r\n        // only allow the wheel to drag the canvas\r\n        /** @see https://developer.mozilla.org/fr/docs/Web/API/MouseEvent/buttons */\r\n        if (buttons !== 4) {\r\n          return\r\n        }\r\n\r\n        // Initialize the memo\r\n        if (!memo) {\r\n          memo = cameraRef.current!.position\r\n        }\r\n\r\n        const pixelDensity = getPixelDensityForZoom(cameraRef.current!.zoom)\r\n\r\n        setCamera({\r\n          ...cameraRef.current!,\r\n          position: movement.map((m, i) => m * pixelDensity + memo[i]) as Coord,\r\n        })\r\n        return memo\r\n      },\r\n      // Add a card\r\n      // @ts-expect-error clientX, Y and ctrlKey\r\n      onDoubleClick: ({ event: { clientX, clientY, ctrlKey } }) => {\r\n        // if (!domTarget.current) return\r\n        // const { width, height } = domTarget.current.getBoundingClientRect()\r\n        // const [cx, cy] = getCanvasPosition(\r\n        //   position,\r\n        //   zoom,\r\n        //   [clientX, clientY],\r\n        //   [width, height],\r\n        // )\r\n        // RE-TODO\r\n        // addCard({\r\n        //   height: 200,\r\n        //   width: 120,\r\n        //   position: [cx - 60, cy - 100],\r\n        // })\r\n      },\r\n    },\r\n    { domTarget, eventOptions: { passive: false } },\r\n  )\r\n\r\n  return (\r\n    <svg\r\n      ref={domTarget}\r\n      style={{ userSelect: \"none\" }}\r\n      viewBox={`0 0 ${document.documentElement.clientWidth} ${document.documentElement.clientHeight}`}\r\n    >\r\n      <CameraComponent>\r\n        <Connections />\r\n        <Cards />\r\n      </CameraComponent>\r\n    </svg>\r\n  )\r\n}\r\n\r\nconst WithModel: React.FC = ({ children }) => {\r\n  const [model, setModel] = React.useState(initModel)\r\n\r\n  return (\r\n    <ModelProvider model={model} onSetModel={setModel}>\r\n      {children}\r\n    </ModelProvider>\r\n  )\r\n}\r\n\r\nReactDOM.render(\r\n  <WithModel>\r\n    <CameraProvider>\r\n      <App />\r\n    </CameraProvider>\r\n  </WithModel>,\r\n  document.getElementById(\"root\"),\r\n)\r\n"],"sourceRoot":""}